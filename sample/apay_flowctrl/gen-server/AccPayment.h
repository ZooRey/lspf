/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AccPayment_H
#define AccPayment_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "payment_types.h"

namespace accpayment_thrift {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class AccPaymentIf {
 public:
  virtual ~AccPaymentIf() {}
  virtual void query(std::string& _return, const std::string& logid, const std::string& request) = 0;
  virtual void pay(std::string& _return, const std::string& logid, const std::string& request) = 0;
};

class AccPaymentIfFactory {
 public:
  typedef AccPaymentIf Handler;

  virtual ~AccPaymentIfFactory() {}

  virtual AccPaymentIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AccPaymentIf* /* handler */) = 0;
};

class AccPaymentIfSingletonFactory : virtual public AccPaymentIfFactory {
 public:
  AccPaymentIfSingletonFactory(const boost::shared_ptr<AccPaymentIf>& iface) : iface_(iface) {}
  virtual ~AccPaymentIfSingletonFactory() {}

  virtual AccPaymentIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AccPaymentIf* /* handler */) {}

 protected:
  boost::shared_ptr<AccPaymentIf> iface_;
};

class AccPaymentNull : virtual public AccPaymentIf {
 public:
  virtual ~AccPaymentNull() {}
  void query(std::string& /* _return */, const std::string& /* logid */, const std::string& /* request */) {
    return;
  }
  void pay(std::string& /* _return */, const std::string& /* logid */, const std::string& /* request */) {
    return;
  }
};

typedef struct _AccPayment_query_args__isset {
  _AccPayment_query_args__isset() : logid(false), request(false) {}
  bool logid :1;
  bool request :1;
} _AccPayment_query_args__isset;

class AccPayment_query_args {
 public:

  AccPayment_query_args(const AccPayment_query_args&);
  AccPayment_query_args& operator=(const AccPayment_query_args&);
  AccPayment_query_args() : logid(), request() {
  }

  virtual ~AccPayment_query_args() throw();
  std::string logid;
  std::string request;

  _AccPayment_query_args__isset __isset;

  void __set_logid(const std::string& val);

  void __set_request(const std::string& val);

  bool operator == (const AccPayment_query_args & rhs) const
  {
    if (!(logid == rhs.logid))
      return false;
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const AccPayment_query_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccPayment_query_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccPayment_query_pargs {
 public:


  virtual ~AccPayment_query_pargs() throw();
  const std::string* logid;
  const std::string* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccPayment_query_result__isset {
  _AccPayment_query_result__isset() : success(false) {}
  bool success :1;
} _AccPayment_query_result__isset;

class AccPayment_query_result {
 public:

  AccPayment_query_result(const AccPayment_query_result&);
  AccPayment_query_result& operator=(const AccPayment_query_result&);
  AccPayment_query_result() : success() {
  }

  virtual ~AccPayment_query_result() throw();
  std::string success;

  _AccPayment_query_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const AccPayment_query_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AccPayment_query_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccPayment_query_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccPayment_query_presult__isset {
  _AccPayment_query_presult__isset() : success(false) {}
  bool success :1;
} _AccPayment_query_presult__isset;

class AccPayment_query_presult {
 public:


  virtual ~AccPayment_query_presult() throw();
  std::string* success;

  _AccPayment_query_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AccPayment_pay_args__isset {
  _AccPayment_pay_args__isset() : logid(false), request(false) {}
  bool logid :1;
  bool request :1;
} _AccPayment_pay_args__isset;

class AccPayment_pay_args {
 public:

  AccPayment_pay_args(const AccPayment_pay_args&);
  AccPayment_pay_args& operator=(const AccPayment_pay_args&);
  AccPayment_pay_args() : logid(), request() {
  }

  virtual ~AccPayment_pay_args() throw();
  std::string logid;
  std::string request;

  _AccPayment_pay_args__isset __isset;

  void __set_logid(const std::string& val);

  void __set_request(const std::string& val);

  bool operator == (const AccPayment_pay_args & rhs) const
  {
    if (!(logid == rhs.logid))
      return false;
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const AccPayment_pay_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccPayment_pay_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccPayment_pay_pargs {
 public:


  virtual ~AccPayment_pay_pargs() throw();
  const std::string* logid;
  const std::string* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccPayment_pay_result__isset {
  _AccPayment_pay_result__isset() : success(false) {}
  bool success :1;
} _AccPayment_pay_result__isset;

class AccPayment_pay_result {
 public:

  AccPayment_pay_result(const AccPayment_pay_result&);
  AccPayment_pay_result& operator=(const AccPayment_pay_result&);
  AccPayment_pay_result() : success() {
  }

  virtual ~AccPayment_pay_result() throw();
  std::string success;

  _AccPayment_pay_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const AccPayment_pay_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AccPayment_pay_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccPayment_pay_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccPayment_pay_presult__isset {
  _AccPayment_pay_presult__isset() : success(false) {}
  bool success :1;
} _AccPayment_pay_presult__isset;

class AccPayment_pay_presult {
 public:


  virtual ~AccPayment_pay_presult() throw();
  std::string* success;

  _AccPayment_pay_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AccPaymentClient : virtual public AccPaymentIf {
 public:
  AccPaymentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AccPaymentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void query(std::string& _return, const std::string& logid, const std::string& request);
  void send_query(const std::string& logid, const std::string& request);
  void recv_query(std::string& _return);
  void pay(std::string& _return, const std::string& logid, const std::string& request);
  void send_pay(const std::string& logid, const std::string& request);
  void recv_pay(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AccPaymentProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<AccPaymentIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AccPaymentProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_query(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pay(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AccPaymentProcessor(boost::shared_ptr<AccPaymentIf> iface) :
    iface_(iface) {
    processMap_["query"] = &AccPaymentProcessor::process_query;
    processMap_["pay"] = &AccPaymentProcessor::process_pay;
  }

  virtual ~AccPaymentProcessor() {}
};

class AccPaymentProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AccPaymentProcessorFactory(const ::boost::shared_ptr< AccPaymentIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AccPaymentIfFactory > handlerFactory_;
};

class AccPaymentMultiface : virtual public AccPaymentIf {
 public:
  AccPaymentMultiface(std::vector<boost::shared_ptr<AccPaymentIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AccPaymentMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AccPaymentIf> > ifaces_;
  AccPaymentMultiface() {}
  void add(boost::shared_ptr<AccPaymentIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void query(std::string& _return, const std::string& logid, const std::string& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query(_return, logid, request);
    }
    ifaces_[i]->query(_return, logid, request);
    return;
  }

  void pay(std::string& _return, const std::string& logid, const std::string& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pay(_return, logid, request);
    }
    ifaces_[i]->pay(_return, logid, request);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class AccPaymentConcurrentClient : virtual public AccPaymentIf {
 public:
  AccPaymentConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AccPaymentConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void query(std::string& _return, const std::string& logid, const std::string& request);
  int32_t send_query(const std::string& logid, const std::string& request);
  void recv_query(std::string& _return, const int32_t seqid);
  void pay(std::string& _return, const std::string& logid, const std::string& request);
  int32_t send_pay(const std::string& logid, const std::string& request);
  void recv_pay(std::string& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
