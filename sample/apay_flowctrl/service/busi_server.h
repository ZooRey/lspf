#ifndef __ACCPAYMENT_SERVER_H__
#define __ACCPAYMENT_SERVER_H__

// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include "../gen-server/AccPayment.h"
#include <thrift/transport/TSocket.h>
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TThreadedServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <iostream>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::accpayment_thrift;

class BusiHandler;

class AccPaymentHandler : virtual public AccPaymentIf {
public:
    AccPaymentHandler() {
    // Your initialization goes here
    }

    void query(std::string& _return, const std::string& logid, const std::string& request);

    void pay(std::string& _return, const std::string& logid, const std::string& request);

private:

    BusiHandler *getHandler(const int type);
};

/*
  DemoCloneFactory is code generated.
  DemoCloneFactory is useful for getting access to the server side of the
  transport.  It is also useful for making per-connection state.  Without this
  CloneFactory, all connections will end up sharing the same handler instance.
*/
class AccPaymentCloneFactory : virtual public AccPaymentIfFactory {
public:
    virtual ~AccPaymentCloneFactory() {}
    virtual AccPaymentIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo)
    {
        boost::shared_ptr<TSocket> sock = boost::dynamic_pointer_cast<TSocket>(connInfo.transport);
        /*
        std::cout << "Incoming connection\n";
        std::cout << "\tSocketInfo: "  << sock->getSocketInfo() << "\n";
        std::cout << "\tPeerHost: "    << sock->getPeerHost() << "\n";
        std::cout << "\tPeerAddress: " << sock->getPeerAddress() << "\n";
        std::cout << "\tPeerPort: "    << sock->getPeerPort() << "\n";
        */
        return new AccPaymentHandler;
    }

    virtual void releaseHandler(AccPaymentIf* handler){
        delete handler;
    }

};


#endif // __DEMO_SERVER_H__
