/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Demo_H
#define Demo_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "demo_types.h"

namespace demo_thrift {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class DemoIf {
 public:
  virtual ~DemoIf() {}

  /**
   * A method definition looks like C code. It has a return type, arguments,
   * and optionally a list of exceptions that it may throw. Note that argument
   * lists and exception lists are specified using the exact same syntax as
   * field lists in struct or exception definitions.
   */
  virtual void ping() = 0;
  virtual int32_t add(const int32_t num1, const int32_t num2) = 0;
  virtual int32_t calculate(const int32_t logid, const Work& w) = 0;

  /**
   * This method has a oneway modifier. That means the client only makes
   * a request and does not listen for any response at all. Oneway methods
   * must be void.
   */
  virtual void zip() = 0;
  virtual void query(std::string& _return, const std::string& request) = 0;
};

class DemoIfFactory {
 public:
  typedef DemoIf Handler;

  virtual ~DemoIfFactory() {}

  virtual DemoIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DemoIf* /* handler */) = 0;
};

class DemoIfSingletonFactory : virtual public DemoIfFactory {
 public:
  DemoIfSingletonFactory(const boost::shared_ptr<DemoIf>& iface) : iface_(iface) {}
  virtual ~DemoIfSingletonFactory() {}

  virtual DemoIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DemoIf* /* handler */) {}

 protected:
  boost::shared_ptr<DemoIf> iface_;
};

class DemoNull : virtual public DemoIf {
 public:
  virtual ~DemoNull() {}
  void ping() {
    return;
  }
  int32_t add(const int32_t /* num1 */, const int32_t /* num2 */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t calculate(const int32_t /* logid */, const Work& /* w */) {
    int32_t _return = 0;
    return _return;
  }
  void zip() {
    return;
  }
  void query(std::string& /* _return */, const std::string& /* request */) {
    return;
  }
};


class Demo_ping_args {
 public:

  Demo_ping_args(const Demo_ping_args&);
  Demo_ping_args& operator=(const Demo_ping_args&);
  Demo_ping_args() {
  }

  virtual ~Demo_ping_args() throw();

  bool operator == (const Demo_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Demo_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Demo_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Demo_ping_pargs {
 public:


  virtual ~Demo_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Demo_ping_result {
 public:

  Demo_ping_result(const Demo_ping_result&);
  Demo_ping_result& operator=(const Demo_ping_result&);
  Demo_ping_result() {
  }

  virtual ~Demo_ping_result() throw();

  bool operator == (const Demo_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Demo_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Demo_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Demo_ping_presult {
 public:


  virtual ~Demo_ping_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Demo_add_args__isset {
  _Demo_add_args__isset() : num1(false), num2(false) {}
  bool num1 :1;
  bool num2 :1;
} _Demo_add_args__isset;

class Demo_add_args {
 public:

  Demo_add_args(const Demo_add_args&);
  Demo_add_args& operator=(const Demo_add_args&);
  Demo_add_args() : num1(0), num2(0) {
  }

  virtual ~Demo_add_args() throw();
  int32_t num1;
  int32_t num2;

  _Demo_add_args__isset __isset;

  void __set_num1(const int32_t val);

  void __set_num2(const int32_t val);

  bool operator == (const Demo_add_args & rhs) const
  {
    if (!(num1 == rhs.num1))
      return false;
    if (!(num2 == rhs.num2))
      return false;
    return true;
  }
  bool operator != (const Demo_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Demo_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Demo_add_pargs {
 public:


  virtual ~Demo_add_pargs() throw();
  const int32_t* num1;
  const int32_t* num2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Demo_add_result__isset {
  _Demo_add_result__isset() : success(false) {}
  bool success :1;
} _Demo_add_result__isset;

class Demo_add_result {
 public:

  Demo_add_result(const Demo_add_result&);
  Demo_add_result& operator=(const Demo_add_result&);
  Demo_add_result() : success(0) {
  }

  virtual ~Demo_add_result() throw();
  int32_t success;

  _Demo_add_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Demo_add_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Demo_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Demo_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Demo_add_presult__isset {
  _Demo_add_presult__isset() : success(false) {}
  bool success :1;
} _Demo_add_presult__isset;

class Demo_add_presult {
 public:


  virtual ~Demo_add_presult() throw();
  int32_t* success;

  _Demo_add_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Demo_calculate_args__isset {
  _Demo_calculate_args__isset() : logid(false), w(false) {}
  bool logid :1;
  bool w :1;
} _Demo_calculate_args__isset;

class Demo_calculate_args {
 public:

  Demo_calculate_args(const Demo_calculate_args&);
  Demo_calculate_args& operator=(const Demo_calculate_args&);
  Demo_calculate_args() : logid(0) {
  }

  virtual ~Demo_calculate_args() throw();
  int32_t logid;
  Work w;

  _Demo_calculate_args__isset __isset;

  void __set_logid(const int32_t val);

  void __set_w(const Work& val);

  bool operator == (const Demo_calculate_args & rhs) const
  {
    if (!(logid == rhs.logid))
      return false;
    if (!(w == rhs.w))
      return false;
    return true;
  }
  bool operator != (const Demo_calculate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Demo_calculate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Demo_calculate_pargs {
 public:


  virtual ~Demo_calculate_pargs() throw();
  const int32_t* logid;
  const Work* w;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Demo_calculate_result__isset {
  _Demo_calculate_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _Demo_calculate_result__isset;

class Demo_calculate_result {
 public:

  Demo_calculate_result(const Demo_calculate_result&);
  Demo_calculate_result& operator=(const Demo_calculate_result&);
  Demo_calculate_result() : success(0) {
  }

  virtual ~Demo_calculate_result() throw();
  int32_t success;
  InvalidOperation ouch;

  _Demo_calculate_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_ouch(const InvalidOperation& val);

  bool operator == (const Demo_calculate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const Demo_calculate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Demo_calculate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Demo_calculate_presult__isset {
  _Demo_calculate_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _Demo_calculate_presult__isset;

class Demo_calculate_presult {
 public:


  virtual ~Demo_calculate_presult() throw();
  int32_t* success;
  InvalidOperation ouch;

  _Demo_calculate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Demo_zip_args {
 public:

  Demo_zip_args(const Demo_zip_args&);
  Demo_zip_args& operator=(const Demo_zip_args&);
  Demo_zip_args() {
  }

  virtual ~Demo_zip_args() throw();

  bool operator == (const Demo_zip_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Demo_zip_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Demo_zip_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Demo_zip_pargs {
 public:


  virtual ~Demo_zip_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Demo_query_args__isset {
  _Demo_query_args__isset() : request(false) {}
  bool request :1;
} _Demo_query_args__isset;

class Demo_query_args {
 public:

  Demo_query_args(const Demo_query_args&);
  Demo_query_args& operator=(const Demo_query_args&);
  Demo_query_args() : request() {
  }

  virtual ~Demo_query_args() throw();
  std::string request;

  _Demo_query_args__isset __isset;

  void __set_request(const std::string& val);

  bool operator == (const Demo_query_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Demo_query_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Demo_query_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Demo_query_pargs {
 public:


  virtual ~Demo_query_pargs() throw();
  const std::string* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Demo_query_result__isset {
  _Demo_query_result__isset() : success(false) {}
  bool success :1;
} _Demo_query_result__isset;

class Demo_query_result {
 public:

  Demo_query_result(const Demo_query_result&);
  Demo_query_result& operator=(const Demo_query_result&);
  Demo_query_result() : success() {
  }

  virtual ~Demo_query_result() throw();
  std::string success;

  _Demo_query_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const Demo_query_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Demo_query_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Demo_query_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Demo_query_presult__isset {
  _Demo_query_presult__isset() : success(false) {}
  bool success :1;
} _Demo_query_presult__isset;

class Demo_query_presult {
 public:


  virtual ~Demo_query_presult() throw();
  std::string* success;

  _Demo_query_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DemoClient : virtual public DemoIf {
 public:
  DemoClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DemoClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  int32_t add(const int32_t num1, const int32_t num2);
  void send_add(const int32_t num1, const int32_t num2);
  int32_t recv_add();
  int32_t calculate(const int32_t logid, const Work& w);
  void send_calculate(const int32_t logid, const Work& w);
  int32_t recv_calculate();
  void zip();
  void send_zip();
  void query(std::string& _return, const std::string& request);
  void send_query(const std::string& request);
  void recv_query(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DemoProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DemoIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DemoProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_calculate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_zip(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DemoProcessor(boost::shared_ptr<DemoIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &DemoProcessor::process_ping;
    processMap_["add"] = &DemoProcessor::process_add;
    processMap_["calculate"] = &DemoProcessor::process_calculate;
    processMap_["zip"] = &DemoProcessor::process_zip;
    processMap_["query"] = &DemoProcessor::process_query;
  }

  virtual ~DemoProcessor() {}
};

class DemoProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DemoProcessorFactory(const ::boost::shared_ptr< DemoIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DemoIfFactory > handlerFactory_;
};

class DemoMultiface : virtual public DemoIf {
 public:
  DemoMultiface(std::vector<boost::shared_ptr<DemoIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DemoMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DemoIf> > ifaces_;
  DemoMultiface() {}
  void add(boost::shared_ptr<DemoIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  int32_t add(const int32_t num1, const int32_t num2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add(num1, num2);
    }
    return ifaces_[i]->add(num1, num2);
  }

  int32_t calculate(const int32_t logid, const Work& w) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->calculate(logid, w);
    }
    return ifaces_[i]->calculate(logid, w);
  }

  void zip() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->zip();
    }
    ifaces_[i]->zip();
  }

  void query(std::string& _return, const std::string& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query(_return, request);
    }
    ifaces_[i]->query(_return, request);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class DemoConcurrentClient : virtual public DemoIf {
 public:
  DemoConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DemoConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  int32_t send_ping();
  void recv_ping(const int32_t seqid);
  int32_t add(const int32_t num1, const int32_t num2);
  int32_t send_add(const int32_t num1, const int32_t num2);
  int32_t recv_add(const int32_t seqid);
  int32_t calculate(const int32_t logid, const Work& w);
  int32_t send_calculate(const int32_t logid, const Work& w);
  int32_t recv_calculate(const int32_t seqid);
  void zip();
  void send_zip();
  void query(std::string& _return, const std::string& request);
  int32_t send_query(const std::string& request);
  void recv_query(std::string& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
