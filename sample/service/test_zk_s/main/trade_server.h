#ifndef __RPC_SERVER_H__
#define __RPC_SERVER_H__

// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include "gen-server/CupsChannel.h"
#include <thrift/transport/TSocket.h>
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TThreadedServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <iostream>
#include <string>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace std;
using namespace  ::payment_channel;

class CupsChannelHandler : virtual public CupsChannelIf 
{
public:
	CupsChannelHandler() 
	{
		// Your initialization goes here
	}

	void DoTrans(std::string& _return, const std::string& logid, const std::string& request);
};

/*
  DemoCloneFactory is code generated.
  DemoCloneFactory is useful for getting access to the server side of the
  transport.  It is also useful for making per-connection state.  Without this
  CloneFactory, all connections will end up sharing the same handler instance.
*/
class CupsChannelCloneFactory : virtual public CupsChannelIfFactory
{
public:
	CupsChannelCloneFactory()
	{
	}
    virtual ~CupsChannelCloneFactory() {}
    virtual CupsChannelIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo)
    {
        boost::shared_ptr<TSocket> sock = boost::dynamic_pointer_cast<TSocket>(connInfo.transport);
        std::cout << "Incoming connection\n";
        std::cout << "\tSocketInfo: "  << sock->getSocketInfo() << "\n";
        std::cout << "\tPeerHost: "    << sock->getPeerHost() << "\n";
        std::cout << "\tPeerAddress: " << sock->getPeerAddress() << "\n";
        std::cout << "\tPeerPort: "    << sock->getPeerPort() << "\n";
        return new CupsChannelHandler();
    }

    virtual void releaseHandler(CupsChannelIf* handler)
    {
        delete handler;
    }
};
#endif // __RPC_SERVER_H__
